union GlobalSearch = Tweet | Company | User

type Tweet {
	_id: ID
	author: String
	content: String
	date: String
	likes: [Account]
}

interface Account {
	_id: ID
	name: String!
	username: String!
	description: String
}

type User implements Account {
	_id: ID
	name: String!
	username: String!
	description: String
	status: String
}

type Company implements Account {
	_id: ID
	name: String!
	username: String!
	description: String
	company: String!
}

input TweetInput {
	author: String!
	content: String!
	date: String
}

input AccountInput {
	name: String!
	username: String!
	description: String
	status: String
	company: String
}

input AccountEditInput {
	name: String
	username: String
	description: String
	status: String
	company: String
}

type Query {
	getTweets: [Tweet]
	getQuantityTweets: Int
	getSingleTweet(id: ID): Tweet
	getAccount(id: ID): Account
	globalSearch(keyword: String): [GlobalSearch]
}

type Mutation {
	createTweet(newTweet: TweetInput): ID
	updateLikes(newLike: ID, tweetId: ID): Tweet
	removeTweet(id: ID): Tweet
	createAccount(newAccount: AccountInput): ID
	updateAccount(newData: AccountEditInput, id: ID): Account
}
